/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MermaidFixer
});
module.exports = __toCommonJS(main_exports);

// src/plugin.ts
var import_obsidian2 = require("obsidian");

// src/mermaidData.ts
var MERMAID_DATA = {
  flowchart: {
    description: "Flowcharts",
    definitions: {
      "flowchart-pointEnd": '<marker id="flowchart-pointEnd" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" class="marker flowchart" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="userSpaceOnUse" markerWidth="12" markerHeight="12" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowMarkerPath" /></marker>',
      "flowchart-pointStart": '<marker id="flowchart-pointStart" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" class="marker flowchart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="userSpaceOnUse" markerWidth="12" markerHeight="12" orient="auto"><path d="M 0 5 L 10 10 L 10 0 z" class="arrowMarkerPath" /></marker>',
      "flowchart-circleEnd": '<marker id="flowchart-circleEnd" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" class="marker flowchart" viewBox="0 0 10 10" refX="11" refY="5" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><circle cx="5" cy="5" r="5" class="arrowMarkerPath" /></marker>',
      "flowchart-circleStart": '<marker id="flowchart-circleStart" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" class="marker flowchart" viewBox="0 0 10 10" refX="-1" refY="5" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><circle cx="5" cy="5" r="5" class="arrowMarkerPath" /></marker>',
      "flowchart-crossEnd": '<marker id="flowchart-crossEnd" stroke="var(--text-normal)" stroke-width="2" fill="var(--text-normal)" class="marker cross flowchart" viewBox="0 0 11 11" refX="12" refY="5.2" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><path d="M 1,1 l 9,9 M 10,1 l -9,9" class="arrowMarkerPath" /></marker>',
      "flowchart-crossStart": '<marker id="flowchart-crossStart" stroke="var(--text-normal)" stroke-width="2" fill="var(--text-normal)" class="marker cross flowchart" viewBox="0 0 11 11" refX="-1" refY="5.2" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><path d="M 1,1 l 9,9 M 10,1 l -9,9" class="arrowMarkerPath" /></marker>'
    }
  },
  sequenceDiagram: {
    description: "Sequence diagrams",
    definitions: {
      "arrowhead": '<marker id="arrowhead" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" refX="9" refY="5" markerUnits="userSpaceOnUse" markerWidth="12" markerHeight="12" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" /></marker>',
      "crosshead": '<marker id="crosshead" stroke="var(--text-normal)" markerWidth="15" markerHeight="8" orient="auto" refX="4" refY="5"><path stroke-width="1pt" d="M 1,2 L 6,7 M 6,2 L 1,7" style="stroke-dasharray: 0, 0;" /></marker>',
      "filled-head": '<marker id="filled-head" stroke="none" fill="var(--text-normal)" refX="18" refY="7" markerWidth="20" markerHeight="28" orient="auto"><path d="M 18,7 L9,13 L14,7 L9,1 Z" /></marker>',
      "sequencenumber": '<marker id="sequencenumber" fill="var(--text-normal)" refX="15" refY="15" markerWidth="60" markerHeight="40" orient="auto"><circle cx="15" cy="15" r="6" /></marker>'
    },
    style: '.mermaid [aria-roledescription="sequence"] .sequenceNumber{fill:var(--background-primary)!important;}'
  },
  classDiagram: {
    description: "Class diagrams",
    definitions: {
      "classDiagram-aggregationStart": '<marker id="classDiagram-aggregationStart" stroke="var(--text-normal)" stroke-width="1" fill="var(--background-primary)" class="marker aggregation classDiagram" refX="0" refY="7" markerWidth="190" markerHeight="240" orient="auto"><path d="M 18,7 L9,13 L1,7 L9,1 Z" /></marker>',
      "classDiagram-aggregationEnd": '<marker id="classDiagram-aggregationEnd" stroke="var(--text-normal)" stroke-width="1" fill="var(--background-primary)" class="marker aggregation classDiagram" refX="19" refY="7" markerWidth="20" markerHeight="28" orient="auto"><path d="M 18,7 L9,13 L1,7 L9,1 Z" /></marker>',
      "classDiagram-extensionStart": '<marker id="classDiagram-extensionStart" stroke="var(--text-normal)" stroke-width="1" fill="var(--background-primary)" class="marker extension classDiagram" refX="0" refY="7" markerWidth="190" markerHeight="240" orient="auto"><path d="M 1,7 L18,13 V 1 Z" /></marker>',
      "classDiagram-extensionEnd": '<marker id="classDiagram-extensionEnd" stroke="var(--text-normal)" stroke-width="1" fill="var(--background-primary)" class="marker extension classDiagram" refX="19" refY="7" markerWidth="20" markerHeight="28" orient="auto"><path d="M 1,1 V 13 L18,7 Z" /></marker>',
      "classDiagram-compositionStart": '<marker id="classDiagram-compositionStart" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" class="marker composition classDiagram" refX="0" refY="7" markerWidth="190" markerHeight="240" orient="auto"><path d="M 18,7 L9,13 L1,7 L9,1 Z" /></marker>',
      "classDiagram-compositionEnd": '<marker id="classDiagram-compositionEnd" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" class="marker composition classDiagram" refX="19" refY="7" markerWidth="20" markerHeight="28" orient="auto"><path d="M 18,7 L9,13 L1,7 L9,1 Z" /></marker>',
      "classDiagram-dependencyStart": '<marker id="classDiagram-dependencyStart" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" class="marker dependency classDiagram" refX="0" refY="7" markerWidth="190" markerHeight="240" orient="auto"><path d="M 5,7 L9,13 L1,7 L9,1 Z" /></marker>',
      "classDiagram-dependencyEnd": '<marker id="classDiagram-dependencyEnd" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" class="marker dependency classDiagram" refX="19" refY="7" markerWidth="20" markerHeight="28" orient="auto"><path d="M 18,7 L9,13 L14,7 L9,1 Z" /></marker>',
      "classDiagram-lollipopStart": '<marker id="classDiagram-lollipopStart" stroke="var(--text-normal)" stroke-width="1" fill="var(--background-primary)" class="marker lollipop classDiagram" refX="0" refY="7" markerWidth="190" markerHeight="240" orient="auto"><circle cx="6" cy="7" r="6" /></marker>',
      "classDiagram-lollipopEnd": '<marker id="classDiagram-lollipopEnd" stroke="var(--text-normal)" stroke-width="1" fill="var(--background-primary)" class="marker lollipop classDiagram" refX="12" refY="7" markerWidth="190" markerHeight="240" orient="auto"><circle cx="6" cy="7" r="6" /></marker>'
    },
    style: '.mermaid [aria-roledescription="classDiagram"] .relation{stroke:var(--text-normal)!important;}'
  },
  stateDiagram: {
    description: "State diagrams",
    definitions: {
      "statediagram-barbEnd": '<marker id="statediagram-barbEnd" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" refX="19" refY="7" markerWidth="20" markerHeight="14" markerUnits="strokeWidth" orient="auto"><path d="M 19,7 L9,13 L14,7 L9,1 Z" /></marker>'
    }
  },
  erDiagram: {
    description: "Entity Relationship diagrams",
    definitions: {
      "ONLY_ONE_START": '<marker id="ONLY_ONE_START" stroke="var(--text-muted)" stroke-width="1" fill="none" refX="0" refY="9" markerWidth="18" markerHeight="18" orient="auto"><path d="M9,0 L9,18 M15,0 L15,18" /></marker>',
      "ONLY_ONE_END": '<marker id="ONLY_ONE_END" stroke="var(--text-muted)" stroke-width="1" fill="none" refX="18" refY="9" markerWidth="18" markerHeight="18" orient="auto"><path d="M3,0 L3,18 M9,0 L9,18" /></marker>',
      "ZERO_OR_ONE_START": '<marker id="ZERO_OR_ONE_START" stroke="var(--text-muted)" stroke-width="1" fill="none" refX="0" refY="9" markerWidth="30" markerHeight="18" orient="auto"><circle fill="var(--background-primary)" cx="21" cy="9" r="6" /><path d="M9,0 L9,18" /></marker>',
      "ZERO_OR_ONE_END": '<marker id="ZERO_OR_ONE_END" stroke="var(--text-muted)" stroke-width="1" fill="none" refX="30" refY="9" markerWidth="30" markerHeight="18" orient="auto"><circle fill="var(--background-primary)" cx="9" cy="9" r="6" /><path d="M21,0 L21,18" /></marker>',
      "ONE_OR_MORE_START": '<marker id="ONE_OR_MORE_START" stroke="var(--text-muted)" stroke-width="1" fill="none" refX="18" refY="18" markerWidth="45" markerHeight="36" orient="auto"><path d="M0,18 Q 18,0 36,18 Q 18,36 0,18 M42,9 L42,27" /></marker>',
      "ONE_OR_MORE_END": '<marker id="ONE_OR_MORE_END" stroke="var(--text-muted)" stroke-width="1" fill="none" refX="27" refY="18" markerWidth="45" markerHeight="36" orient="auto"><path d="M3,9 L3,27 M9,18 Q27,0 45,18 Q27,36 9,18" /></marker>',
      "ZERO_OR_MORE_START": '<marker id="ZERO_OR_MORE_START" stroke="var(--text-muted)" stroke-width="1" fill="none" refX="18" refY="18" markerWidth="57" markerHeight="36" orient="auto"><circle fill="var(--background-primary)" cx="48" cy="18" r="6" /><path d="M0,18 Q18,0 36,18 Q18,36 0,18" /></marker>',
      "ZERO_OR_MORE_END": '<marker id="ZERO_OR_MORE_END" stroke="var(--text-muted)" stroke-width="1" fill="none" refX="39" refY="18" markerWidth="57" markerHeight="36" orient="auto"><circle fill="var(--background-primary)" cx="9" cy="18" r="6" /><path d="M21,18 Q39,0 57,18 Q39,36 21,18" /></marker>'
    },
    style: '.mermaid [aria-roledescription="er"] path.er{stroke:var(--text-muted)!important;}'
  },
  journey: {
    description: "User journeys",
    definitions: {
      "arrowhead": '<marker id="arrowhead" fill="var(--text-normal)" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z" /></marker>'
    },
    style: '.mermaid [aria-roledescription="journey"] .label{color:#000!important;}'
  },
  gantt: {
    description: "Gantt charts",
    definitions: {}
  },
  pie: {
    description: "Pie charts",
    definitions: {}
  },
  requirementDiagram: {
    description: "Requirement diagrams",
    definitions: {
      "contains_line_ending": '<marker id="contains_line_ending" stroke="var(--text-muted)" stroke-width="1" fill="var(--background-primary)" style="overflow:visible" refX="0" refY="10" markerWidth="20" markerHeight="20" orient="auto"><circle cx="10" cy="10" r="10" /><line x1="0" x2="20" y1="10" y2="10" /><line y1="0" y2="20" x1="10" x2="10" /></marker>',
      "arrow_line_ending": '<marker id="arrow_line_ending" stroke="var(--text-muted)" stroke-width="1" fill="var(--background-primary)" style="overflow:visible" refX="20" refY="10" markerWidth="20" markerHeight="20" orient="auto"><path d="M0,0L20,10 M20,10 L0,20" /></marker>'
    },
    style: '.mermaid [aria-roledescription="requirement"] path.er{stroke:var(--text-normal)!important;}.mermaid [aria-roledescription="requirement"] .reqBox{fill:var(--background-primary-alt)!important;stroke:var(--text-muted)!important}.mermaid [aria-roledescription="requirement"] .reqLabelBox{fill:var(--background-secondary)!important;stroke:none!important}.mermaid [aria-roledescription="requirement"] .req-title-line{stroke:var(--text-muted)!important}.mermaid [aria-roledescription="requirement"] .relationshipLabel{fill:var(--text-normal)!important}'
  },
  gitGraph: {
    description: "Gitgraph diagrams",
    definitions: {}
  },
  C4Context: {
    description: "C4 Context diagrams",
    definitions: {
      "arrowhead": '<marker id="arrowhead" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" refX="9" refY="5" markerUnits="userSpaceOnUse" markerWidth="12" markerHeight="12" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" /></marker>',
      "arrowend": '<marker id="arrowend" stroke="var(--text-normal)" stroke-width="1" fill="var(--text-normal)" refX="1" refY="5" markerUnits="userSpaceOnUse" markerWidth="12" markerHeight="12" orient="auto"><path d="M 10 0 L 0 5 L 10 10 z" /></marker>'
      // We can only make a marker with a given color. It cannot be the color of the link in the C4C diagram. We make the marker identical to the ones in sequence diagrams to ensure compatibility.
    }
  }
};

// src/mermaid.ts
var Mermaid = class {
  static getDiagramTypeDescription(diagramType) {
    return MERMAID_DATA[diagramType].description;
  }
  static getMarkersForDiagramType(diagramType) {
    return MERMAID_DATA[diagramType].definitions;
  }
  static getDiagramTypeStyle(diagramType) {
    var _a;
    return (_a = MERMAID_DATA[diagramType].style) != null ? _a : "";
  }
  static getMapForDiagramTypes(defaultValue) {
    const map = {};
    let diagramType;
    for (diagramType in MERMAID_DATA) {
      map[diagramType] = defaultValue;
    }
    return map;
  }
};

// src/mermaidDefinitions.ts
var MermaidDefinitions = class {
  constructor(diagramTypesList) {
    this.flush();
    for (const diagramType of diagramTypesList) {
      this.addDiagramType(diagramType);
    }
  }
  flush() {
    this.markersByIDThenDiagramType = {};
    this.styles = {};
  }
  addDiagramType(diagramType) {
    var _a, _b;
    const diagramMarkers = Mermaid.getMarkersForDiagramType(diagramType);
    for (const markerID in diagramMarkers) {
      (_b = (_a = this.markersByIDThenDiagramType)[markerID]) != null ? _b : _a[markerID] = {};
      this.markersByIDThenDiagramType[markerID][diagramType] = diagramMarkers[markerID];
    }
    this.styles[diagramType] = Mermaid.getDiagramTypeStyle(diagramType);
  }
  getSVGDefinitions() {
    let definitions = "";
    for (const markerID in this.markersByIDThenDiagramType) {
      const markerDefinitions = Object.values(this.markersByIDThenDiagramType[markerID]);
      const firstMarkerDefinition = markerDefinitions[0];
      definitions += firstMarkerDefinition;
    }
    return definitions;
  }
  getStyles() {
    return Object.values(this.styles).join("");
  }
  getConflicts() {
    const conflicts = [];
    for (const markerID in this.markersByIDThenDiagramType) {
      if (!this.hasConflictForID(markerID))
        continue;
      const diagramTypes = Object.keys(this.markersByIDThenDiagramType[markerID]);
      conflicts.push({ markerID, diagramTypes });
    }
    return conflicts;
  }
  hasConflictForID(markerID) {
    const markersList = Object.values(this.markersByIDThenDiagramType[markerID]);
    const ref = markersList.pop();
    for (const marker of markersList) {
      if (marker !== ref)
        return true;
    }
    return false;
  }
};

// src/icons.ts
var BUTTON_ICON = '<path fill="none" stroke="currentColor" stroke-width="8.3" stroke-linecap="round" stroke-linejoin="round" d="M64.38,95.75L64.38,81.63C64.36,73.49 68.37,65.85 75.08,61.24C88.17,52.31 95.75,37.2 95.08,21.37C75.12,20.51 56.8,32.79 50,51.57C43.2,32.79 24.87,20.51 4.91,21.37C4.25,37.2 11.83,52.31 24.92,61.24C31.63,65.85 35.64,73.49 35.62,81.63L35.62,95.75" />';

// src/settingsTab.ts
var import_obsidian = require("obsidian");
var HIGHLIGHT_CLASS = "mermaid-fixer-highlight";
var CALLOUT_CLASS = "mermaid-fixer-setting-callout";
var ID_PREFIX = "mermaid-fixer-opt-";
var MermaidFixerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    this.containerEl.empty();
    this.buildButtonVisibilityToggle();
    this.buildDiagramTypesSettings();
  }
  buildButtonVisibilityToggle() {
    new import_obsidian.Setting(this.containerEl).setName("Visible button").setDesc("The button is needed, but does nothing.").addToggle((toggle) => {
      toggle.setValue(this.plugin.getButtonVisibility());
      toggle.onChange((value) => {
        this.plugin.setButtonVisibility(value);
      });
    });
  }
  buildDiagramTypesSettings() {
    this.initializeDiagramTypeSelection();
    this.containerEl.createEl("h2", { text: "Covered Mermaid diagram types:" });
    let diagramType;
    for (diagramType in this.diagramTypesSelection) {
      this.buildDiagramTypeToggle(diagramType);
    }
    this.buildEmptyConflictSection();
    this.updateConflicts();
  }
  initializeDiagramTypeSelection() {
    this.diagramTypesSelection = Mermaid.getMapForDiagramTypes(false);
    const currentDiagramTypes = this.plugin.getSelectedDiagramTypes();
    let activeDiagramType;
    for (activeDiagramType of currentDiagramTypes) {
      this.diagramTypesSelection[activeDiagramType] = true;
    }
  }
  buildDiagramTypeToggle(diagramType) {
    new import_obsidian.Setting(this.containerEl).setName(createFragment((el) => {
      el.createSpan({
        text: Mermaid.getDiagramTypeDescription(diagramType),
        cls: ID_PREFIX + diagramType
      });
    })).addToggle((toggle) => {
      toggle.setValue(this.diagramTypesSelection[diagramType]);
      toggle.onChange((value) => {
        this.diagramTypesSelection[diagramType] = value;
        this.updateDiagramTypesSelection();
      });
    });
  }
  updateDiagramTypesSelection() {
    const selectedDiagramTypes = [];
    let diagramType;
    for (diagramType in this.diagramTypesSelection) {
      if (this.diagramTypesSelection[diagramType]) {
        selectedDiagramTypes.push(diagramType);
      }
    }
    this.plugin.setSelectedDiagramTypes(selectedDiagramTypes);
    this.updateConflicts();
  }
  buildEmptyConflictSection() {
    this.conflictsSection = this.containerEl.createDiv({
      cls: "callout " + CALLOUT_CLASS,
      attr: { "data-callout": "warning" }
    });
    const h3 = this.conflictsSection.createEl("h3");
    const warningSVG = h3.createSvg("svg", {
      attr: {
        "viewBox": "0 0 24 24",
        "width": "24",
        "height": "24",
        "fill": "none",
        "stroke": "currentColor",
        "stroke-width": "2",
        "stroke-linecap": "round",
        "stroke-linejoin": "round"
      }
    });
    warningSVG.createSvg("path", {
      attr: {
        "d": "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"
      }
    });
    warningSVG.createSvg("line", {
      attr: {
        "x1": "12",
        "y1": "9",
        "x2": "12",
        "y2": "13"
      }
    });
    warningSVG.createSvg("line", {
      attr: {
        "x1": "12",
        "y1": "17",
        "x2": "12.01",
        "y2": "17"
      }
    });
    h3.appendText(' "Conflicts between selected diagram types:"');
    this.conflictsListEl = this.conflictsSection.createEl("ul");
  }
  updateConflicts() {
    const conflictsList = this.plugin.getConflicts();
    this.flushConflicts();
    for (const conflict of conflictsList) {
      this.addConflict(conflict);
    }
  }
  flushConflicts() {
    this.conflictsListEl.empty();
    this.flushHighlights();
  }
  flushHighlights() {
    const highlightedElems = [...this.containerEl.getElementsByClassName(HIGHLIGHT_CLASS)];
    for (const el of highlightedElems) {
      el.removeClass(HIGHLIGHT_CLASS);
    }
  }
  addConflict(conflict) {
    const { diagramTypes, markerID } = conflict;
    this.conflictsListEl.createEl("li", void 0, (li) => {
      for (let i = 0; i < diagramTypes.length; i++) {
        if (i) {
          li.appendText(i === diagramTypes.length - 1 ? " and " : ", ");
        }
        li.createEl("strong", {
          text: Mermaid.getDiagramTypeDescription(diagramTypes[i])
        });
      }
      li.appendText(" define different markers for ID ");
      li.createEl("code", { text: `"${markerID}"` });
      li.appendText(".");
    });
    for (const diagType of diagramTypes) {
      this.addHighlight(diagType);
    }
  }
  addHighlight(diagramType) {
    const elems = [...this.containerEl.getElementsByClassName(ID_PREFIX + diagramType)];
    for (const el of elems) {
      el.addClass(HIGHLIGHT_CLASS);
    }
  }
};

// src/plugin.ts
var DEFAULT_SETTINGS = {
  selectedDiagramTypes: [
    "flowchart",
    "sequenceDiagram",
    "classDiagram",
    "stateDiagram",
    "erDiagram",
    "gantt",
    "pie",
    "requirementDiagram",
    "gitGraph"
  ],
  visibleButton: true
};
var MermaidFixer = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addButtonForDiagramTypes();
    this.addSettingTab(new MermaidFixerSettingTab(this.app, this));
  }
  getButtonVisibility() {
    return this.settings.visibleButton;
  }
  async setButtonVisibility(buttonVisibility) {
    this.settings.visibleButton = buttonVisibility;
    this.updateIcon();
    this.saveSettings();
  }
  getSelectedDiagramTypes() {
    return this.settings.selectedDiagramTypes;
  }
  async setSelectedDiagramTypes(diagramType) {
    this.settings.selectedDiagramTypes = diagramType;
    this.updateMermaidDefinitions();
    this.updateIcon();
    this.saveSettings();
  }
  getConflicts() {
    return this.mermaidDefinitions.getConflicts();
  }
  updateMermaidDefinitions() {
    this.mermaidDefinitions = new MermaidDefinitions(this.settings.selectedDiagramTypes);
  }
  async loadSettings() {
    this.settings = { ...DEFAULT_SETTINGS, ...await this.loadData() };
    this.updateMermaidDefinitions();
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  addButtonForDiagramTypes() {
    this.updateIcon();
    this.ribbonButton = this.addRibbonIcon(this.iconID, "Mermaid Fixer", this.createButtonFunction());
  }
  updateIcon() {
    if (this.iconID) {
      (0, import_obsidian2.removeIcon)(this.iconID);
    }
    this.renewIconID();
    const defSVG = `<defs>${this.buildDefsContent()}</defs>`;
    const buttonIcon = this.settings.visibleButton ? BUTTON_ICON : "";
    (0, import_obsidian2.addIcon)(this.iconID, defSVG + buttonIcon);
    if (this.ribbonButton) {
      (0, import_obsidian2.setIcon)(this.ribbonButton, this.iconID);
    }
  }
  renewIconID() {
    if (!this.iconID) {
      this.iconID = "mermaid-fixer";
      return;
    }
    if (this.iconID.endsWith("-")) {
      this.iconID = this.iconID.substring(0, this.iconID.length - 1);
      return;
    }
    this.iconID += "-";
  }
  buildDefsContent() {
    return this.mermaidDefinitions.getSVGDefinitions() + `<style>${this.mermaidDefinitions.getStyles()}</style>`;
  }
  createButtonFunction() {
    return (e) => {
      new import_obsidian2.Notice("This button keeps Mermaid arrows visible.\nClicking it does nothing.");
    };
  }
  toggleDefIDs() {
    if ((0, import_obsidian2.getIconIds)().indexOf("mermaid-fixer-off") < 0) {
      const strike = '<line id="mermaid-fixer-off" x1="0" y1="100" x2="100" y2="0" stroke="currentColor" stroke-width="8.3" />';
      (0, import_obsidian2.addIcon)("mermaid-fixer-off", BUTTON_ICON + strike);
    }
    if (document.getElementById("mermaid-fixer-off")) {
      this.updateIcon();
    } else {
      (0, import_obsidian2.setIcon)(this.ribbonButton, "mermaid-fixer-off");
    }
  }
};
